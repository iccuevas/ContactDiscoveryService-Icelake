require "consts.jinc"

// bucket
inline
fn bucket_store_data(
  reg u64 bucket_store,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[bucket_store + 16];
  p = #protect(p, msf);
  return p, msf;
}

// stash
inline
fn stash_blocks(
  reg u64 stash,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[stash];
  p = #protect(p, msf);
  return p, msf;
}

inline
fn stash_path_blocks(
  reg u64 stash,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[stash + 8 * PATH_BLOCKS_ADDR];
  p = #protect(p, msf);
  return p, msf;
}

inline
fn stash_overflow_blocks(
  reg u64 stash,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[stash + 8 * OVERFLOW_BLOCKS_ADDR];
  p = #protect(p, msf);
  return p, msf;
}

inline
fn stash_num_blocks(
  reg u64 stash,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[stash + 8 * NUM_BLOCKS_ADDR];
  p = #protect(p, msf);
  return p, msf;
}

inline
fn stash_overflow_capacity(
  reg u64 stash,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[stash + 8 * OVERFLOW_CAPACITY_ADDR];
  p = #protect(p, msf);
  return p, msf;
}

inline
fn stash_bucket_occupancy(
  reg u64 stash,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[stash + 8 * BUCKET_OCCUPANCY_ADDR];
  p = #protect(p, msf);
  return p, msf;
}

inline
fn stash_bucket_assignments(
  reg u64 stash,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[stash + 8 * BUCKET_ASSIGNMENTS_ADDR];
  p = #protect(p, msf);
  return p, msf;
}

// oram
inline
fn oram_bucket_store(
  reg u64 oram,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[oram];
  p = #protect(p, msf);
  return p, msf;
}

inline
fn oram_stash(
  reg u64 oram,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[oram + 8 * STASH_ADDR];
  p = #protect(p, msf);
  return p, msf;
}

inline
fn oram_position_map(
  reg u64 oram,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[oram + 8 * POSITION_MAP_ADDR];
  p = #protect(p, msf);
  return p, msf;
}

inline
fn oram_path(
  reg u64 oram,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[oram + 8 * PATH_ADDR];
  p = #protect(p, msf);
  return p, msf;
}

inline
fn oram_allocated_ub(
  reg u64 oram,
  #msf reg u64 msf
) -> reg u64, #msf reg u64
{
  reg u64 p;
  #declassify p = (64u)[oram + 8 * ALLOCATED_UB_ADDR];
  p = #protect(p, msf);
  return p, msf;
}