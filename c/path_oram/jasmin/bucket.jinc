require "tree_path.jinc"
require "pointers.jinc"

fn bucket_store_read_bucket_blocks(
  reg u64 bucket_store,
  reg u64 bucket_id,
  reg u64 bucket_data,
  #msf reg u64 msf
) -> #msf reg u64
{
  reg u256 t;
  reg u128 r;
  reg u64 offset encrypted_bucket data;
  inline int i;

  data, msf = bucket_store_data(bucket_store, msf);
  offset = bucket_id * ENCRYPTED_BUCKET_SIZE;
  encrypted_bucket = data + offset;
  for i = 0 to (DECRYPTED_BLOCK_SIZE_QWORDS * BLOCKS_PER_BUCKET) / 4
  {
    t = (u256)[encrypted_bucket + 32 * i];
    (u256)[bucket_data + 32 * i] = t;
  }
  r = (u128)[encrypted_bucket + 32 * ((DECRYPTED_BLOCK_SIZE_QWORDS * BLOCKS_PER_BUCKET) / 4)];
  (u128)[bucket_data + 32 * ((DECRYPTED_BLOCK_SIZE_QWORDS * BLOCKS_PER_BUCKET) / 4)] = r;
  return msf;
}

fn bucket_store_write_bucket_blocks(
  reg u64 bucket_store,
  reg u64 bucket_id,
  reg u64 bucket_data,
  #msf reg u64 msf
) -> #msf reg u64
{
  reg u256 t;
  reg u128 r;
  reg u64 offset encrypted_bucket data;
  inline int i;

  data, msf = bucket_store_data(bucket_store, msf);
  offset = bucket_id * ENCRYPTED_BUCKET_SIZE;
  encrypted_bucket = data + offset;
  for i = 0 to (DECRYPTED_BLOCK_SIZE_QWORDS * BLOCKS_PER_BUCKET) / 4
  {
    t = (u256)[bucket_data + 32 * i];
    (u256)[encrypted_bucket + 32 * i] = t;
  }
  r = (u128)[bucket_data + 32 * ((DECRYPTED_BLOCK_SIZE_QWORDS * BLOCKS_PER_BUCKET) / 4)];
  (u128)[encrypted_bucket + 32 * ((DECRYPTED_BLOCK_SIZE_QWORDS * BLOCKS_PER_BUCKET) / 4)] = r;

  return msf;
}