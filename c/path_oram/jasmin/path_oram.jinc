require "stash.jinc"
require "position_map.jinc"
require "accessors.jinc"

/**
 * @brief read the path from the bucket store, performing the same sequence of instructions independent of the input.
 * Post-condition: the block with `id == target_block_id` will *not* be in the stash - neither the overflow or the path stash.
 * It will be in the block `*target` and the new position will be set.
 * 
 * @param oram 
 * @param path Path for block with ID `target_block_id`.
 * @param target_block_id ID of block to read
 * @param target On output, block with ID `target_block_id` will be available here
 * @param new_position Position for the target block after this access
 */
inline
fn _i_oram_read_path_for_block(
  reg u64 oram path,
  #secret reg u64 target_block_id,
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] target,
  #secret reg u64 new_position,
  #msf reg u64 msf
) -> reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS], #msf reg u64
{
  reg u64 stash bucket_store value;
  inline int i;

  () = #spill(new_position, path);
  stash, msf = oram_stash(oram, msf);
  bucket_store, msf = oram_bucket_store(oram, msf);
  for i = 0 to PATH_LENGTH
  {
    () = #unspill(path);
    path = #protect(path, msf);
    #declassify value = (64u)[path + 8 + 8 * i];
    () = #spill(path);
    value = #protect(value, msf);
    #update_after_call target, msf = _i_stash_add_path_bucket(stash, bucket_store, value, target_block_id, target, msf);
    stash = #protect(stash, msf);
    bucket_store = #protect(bucket_store, msf);
  }
  #update_after_call target, msf = _i_stash_scan_overflow_for_target(stash, target_block_id, target, msf);

  () = #unspill(new_position);
  target[u64 0] = target_block_id;
  target[u64 1] = new_position;

  return target, msf;
}

inline
fn _i_read_accessor(
  reg ptr u64[BLOCK_DATA_SIZE_QWORDS] block_data,
  reg u64 out_data
) -> reg ptr u64[BLOCK_DATA_SIZE_QWORDS]
{
  reg u256 r;
  inline int i;
  for i = 0 to BLOCK_DATA_SIZE_QWORDS / 4
  {
    r = block_data.[u256 32*i];
    (u256)[out_data + 32 * i] = r;
  }
  return block_data;
}

inline
fn _i_write_accessor_full(
  reg ptr u64[BLOCK_DATA_SIZE_QWORDS] block_data,
  reg u64 in_data
) -> reg ptr u64[BLOCK_DATA_SIZE_QWORDS]
{
  reg u256 r;
  inline int i;

  for i = 0 to BLOCK_DATA_SIZE_QWORDS / 4
  {
    r = (u256)[in_data + 32 * i];
    block_data.[u256 32*i] = r;
  }
  return block_data;
}

inline
fn _oram_access_read(
  reg u64 oram,
  #secret reg u64 block_id,
  reg u64 out_data,
  #msf reg u64 msf
) -> reg u32
{
  stack u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_block_s;
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_block;
  // standard variables
  reg u64 new_position x;
  // pointer variables
  reg u64 stash position_map bucket_store path_blocks path;
  // temporary variables
  reg u64 bucket_id;
  reg u32 abort;
  reg bool b;
  inline int i max_position offset;

  () = #spill(out_data);
  target_block = target_block_s;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS { target_block[i] = -1; }
  max_position = (64u)(1 << (PATH_LENGTH - 1));

  new_position, msf = _random_mod_by_pow_of_2(msf, max_position);

  position_map, msf = oram_position_map(oram, msf);
  () = #spill(oram, block_id, new_position, out_data, target_block);
  abort, x, msf = _i_position_map_read_then_set(position_map, block_id, new_position, msf);
  b = abort == 0;
  if (b) {
    msf = #update_msf(b, msf);
    () = #unspill(oram, block_id, new_position, out_data, target_block);
    oram = #protect(oram, msf);
    target_block = #protect_ptr(target_block, msf);
    x *= 2;

    path, msf = oram_path(oram, msf);
    tree_path_update(path, x, PATH_LENGTH);

    new_position *= 2;
    target_block, msf = _i_oram_read_path_for_block(oram, path, block_id, target_block, new_position, msf);
    () = #spill(path);
    () = #unspill(out_data);
    out_data = #protect(out_data, msf);
    target_block[2:BLOCK_DATA_SIZE_QWORDS] = _i_read_accessor(target_block[2:BLOCK_DATA_SIZE_QWORDS], out_data);

    stash, msf = oram_stash(oram, msf);
    () = #spill(oram);
    abort, target_block, msf = _i_stash_add_block(stash, target_block, msf, PATH_LENGTH);

    b = abort == 0;
    () = #spill(abort);
    if (b) {
      msf = #update_msf(b, msf);
      () = #spill(stash);
      () = #unspill(path);
      path = #protect(path, msf);
      () = #spill(path);
      msf = stash_build_path(stash, path, msf, PATH_LENGTH);
      () = #unspill(oram);
      oram = #protect(oram, msf);

      bucket_store, msf = oram_bucket_store(oram, msf);
      path_blocks, msf = stash_path_blocks(stash, msf);
      () = #unspill(path);
      path = #protect(path, msf);
      offset = BLOCKS_PER_BUCKET * DECRYPTED_BLOCK_SIZE_QWORDS * 8;
      for i = 0 to PATH_LENGTH
      {
        #declassify bucket_id = [path + 8 + 8 * i];
        bucket_id = #protect(bucket_id, msf);
        #update_after_call msf = bucket_store_write_bucket_blocks(bucket_store, bucket_id, path_blocks, msf);
        path = #protect(path, msf);
        bucket_store = #protect(bucket_store, msf);
        path_blocks = #protect(path_blocks, msf);
        path_blocks += (64u)offset;
      }
    } else {
      msf = #update_msf(!b, msf);
    }
    () = #unspill(abort);
    abort = #protect_32(abort, msf);
  } else {
    msf = #update_msf(!b, msf);
  }
  return abort;
}

inline
fn _oram_access_write(
  #public reg u64 oram,
  #secret reg u64 block_id,
  #public reg u64 in_data,
  #msf reg u64 msf
) -> reg u32
{
  stack u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_block_s;
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_block;
  // standard variables
  reg u64 new_position x;
  // pointer variables
  reg u64 stash position_map bucket_store path_blocks path;
  // temporary variables
  reg u64 bucket_id;
  reg u32 abort;
  reg bool b;
  inline int i max_position offset;

  () = #spill(in_data);
  target_block = target_block_s;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS { target_block[i] = -1; }
  max_position = (64u)(1 << (PATH_LENGTH - 1));

  new_position, msf = _random_mod_by_pow_of_2(msf, max_position);

  position_map, msf = oram_position_map(oram, msf);
  () = #spill(oram, block_id, new_position, in_data, target_block);
  abort, x, msf = _i_position_map_read_then_set(position_map, block_id, new_position, msf);
  b = abort == 0;
  if (b) {
    msf = #update_msf(b, msf);
    () = #unspill(oram, block_id, new_position, in_data, target_block);
    oram = #protect(oram, msf);
    target_block = #protect_ptr(target_block, msf);
    x *= 2;

    path, msf = oram_path(oram, msf);
    tree_path_update(path, x, PATH_LENGTH);

    new_position *= 2;
    target_block, msf = _i_oram_read_path_for_block(oram, path, block_id, target_block, new_position, msf);
    () = #spill(path);
    () = #unspill(in_data);
    in_data = #protect(in_data, msf);
    target_block[2:BLOCK_DATA_SIZE_QWORDS] = _i_write_accessor_full(target_block[2:BLOCK_DATA_SIZE_QWORDS], in_data);

    stash, msf = oram_stash(oram, msf);
    () = #spill(oram);
    abort, target_block, msf = _i_stash_add_block(stash, target_block, msf, PATH_LENGTH);

    b = abort == 0;
    () = #spill(abort);
    if (b) {
      msf = #update_msf(b, msf);
      () = #spill(stash);
      () = #unspill(path);
      path = #protect(path, msf);
      () = #spill(path);
      msf = stash_build_path(stash, path, msf, PATH_LENGTH);
      () = #unspill(oram);
      oram = #protect(oram, msf);

      bucket_store, msf = oram_bucket_store(oram, msf);
      path_blocks, msf = stash_path_blocks(stash, msf);
      () = #unspill(path);
      path = #protect(path, msf);
      offset = BLOCKS_PER_BUCKET * DECRYPTED_BLOCK_SIZE_QWORDS * 8;
      for i = 0 to PATH_LENGTH
      {
        #declassify bucket_id = [path + 8 + 8 * i];
        bucket_id = #protect(bucket_id, msf);
        #update_after_call msf = bucket_store_write_bucket_blocks(bucket_store, bucket_id, path_blocks, msf);
        path = #protect(path, msf);
        bucket_store = #protect(bucket_store, msf);
        path_blocks = #protect(path_blocks, msf);
        path_blocks += (64u)offset;
      }
    } else {
      msf = #update_msf(!b, msf);
    }
    () = #unspill(abort);
    abort = #protect_32(abort, msf);
  } else {
    msf = #update_msf(!b, msf);
  }
  return abort;
}

inline
fn _oram_function_access_get(
  #public reg u64 oram,
  #secret reg u64 block_id,
  #public reg u64 vargs,
  #msf reg u64 msf
) -> reg u32
{
  stack u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_block_s;
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_block;
  // standard variables
  reg u64 new_position x;
  // pointer variables
  reg u64 stash position_map bucket_store path_blocks path;
  // temporary variables
  reg u64 bucket_id;
  reg u32 abort;
  reg bool b;
  inline int i max_position offset;

  () = #spill(vargs);
  target_block = target_block_s;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS { target_block[i] = -1; }
  max_position = (64u)(1 << (PATH_LENGTH - 1));

  new_position, msf = _random_mod_by_pow_of_2(msf, max_position);

  position_map, msf = oram_position_map(oram, msf);
  () = #spill(oram, block_id, new_position, vargs, target_block);
  abort, x, msf = _i_position_map_read_then_set(position_map, block_id, new_position, msf);
  b = abort == 0;
  if (b) {
    msf = #update_msf(b, msf);
    () = #unspill(oram, block_id, new_position, vargs, target_block);
    oram = #protect(oram, msf);
    target_block = #protect_ptr(target_block, msf);
    x *= 2;

    path, msf = oram_path(oram, msf);
    tree_path_update(path, x, PATH_LENGTH);

    new_position *= 2;
    target_block, msf = _i_oram_read_path_for_block(oram, path, block_id, target_block, new_position, msf);
    () = #spill(path, oram);
    () = #unspill(vargs);
    vargs = #protect(vargs, msf);

    target_block[2:BLOCK_DATA_SIZE_QWORDS], msf = _i_get_record_accessor(target_block[2:BLOCK_DATA_SIZE_QWORDS], vargs, msf);

    () = #unspill(oram);
    oram = #protect(oram, msf);
    stash, msf = oram_stash(oram, msf);
    () = #spill(oram);
    abort, target_block, msf = _i_stash_add_block(stash, target_block, msf, PATH_LENGTH);

    b = abort == 0;
    () = #spill(abort);
    if (b) {
      msf = #update_msf(b, msf);
      () = #spill(stash);
      () = #unspill(path);
      path = #protect(path, msf);
      () = #spill(path);
      msf = stash_build_path(stash, path, msf, PATH_LENGTH);
      () = #unspill(oram);
      oram = #protect(oram, msf);

      bucket_store, msf = oram_bucket_store(oram, msf);
      path_blocks, msf = stash_path_blocks(stash, msf);
      () = #unspill(path);
      path = #protect(path, msf);
      offset = BLOCKS_PER_BUCKET * DECRYPTED_BLOCK_SIZE_QWORDS * 8;
      for i = 0 to PATH_LENGTH
      {
        #declassify bucket_id = [path + 8 + 8 * i];
        bucket_id = #protect(bucket_id, msf);
        #update_after_call msf = bucket_store_write_bucket_blocks(bucket_store, bucket_id, path_blocks, msf);
        path = #protect(path, msf);
        bucket_store = #protect(bucket_store, msf);
        path_blocks = #protect(path_blocks, msf);
        path_blocks += (64u)offset;
      }
    } else {
      msf = #update_msf(!b, msf);
    }
    () = #unspill(abort);
    abort = #protect_32(abort, msf);
  } else {
    msf = #update_msf(!b, msf);
  }
  return abort;
}

inline
fn _oram_function_access_put(
  #public reg u64 oram,
  #secret reg u64 block_id,
  #public reg u64 vargs,
  #msf reg u64 msf
) -> reg u32
{
  stack u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_block_s;
  reg ptr u64[DECRYPTED_BLOCK_SIZE_QWORDS] target_block;
  // standard variables
  reg u64 new_position x;
  // pointer variables
  reg u64 stash position_map bucket_store path_blocks path;
  // temporary variables
  reg u64 bucket_id;
  reg u32 abort;
  reg bool b;
  inline int i max_position offset;

  () = #spill(vargs);
  target_block = target_block_s;
  for i = 0 to DECRYPTED_BLOCK_SIZE_QWORDS { target_block[i] = -1; }
  max_position = (64u)(1 << (PATH_LENGTH - 1));

  new_position, msf = _random_mod_by_pow_of_2(msf, max_position);

  position_map, msf = oram_position_map(oram, msf);
  () = #spill(oram, block_id, new_position, vargs, target_block);
  abort, x, msf = _i_position_map_read_then_set(position_map, block_id, new_position, msf);

  b = abort == 0;
  if (b) {
    msf = #update_msf(b, msf);
    () = #unspill(oram, block_id, new_position, vargs, target_block);
    oram = #protect(oram, msf);
    target_block = #protect_ptr(target_block, msf);
    x *= 2;

    path, msf = oram_path(oram, msf);
    tree_path_update(path, x, PATH_LENGTH);

    new_position *= 2;
    target_block, msf = _i_oram_read_path_for_block(oram, path, block_id, target_block, new_position, msf);
    () = #spill(path, oram);
    () = #unspill(vargs);
    vargs = #protect(vargs, msf);

    target_block[2:BLOCK_DATA_SIZE_QWORDS], msf = _i_robinhood_accessor(target_block[2:BLOCK_DATA_SIZE_QWORDS], vargs, msf);

    () = #unspill(oram);
    oram = #protect(oram, msf);
    stash, msf = oram_stash(oram, msf);
    () = #spill(oram);
    abort, target_block, msf = _i_stash_add_block(stash, target_block, msf, PATH_LENGTH);

    b = abort == 0;
    () = #spill(abort);
    if (b) {
      msf = #update_msf(b, msf);
      () = #spill(stash);
      () = #unspill(path);
      path = #protect(path, msf);
      () = #spill(path);
      msf = stash_build_path(stash, path, msf, PATH_LENGTH);
      () = #unspill(oram);
      oram = #protect(oram, msf);

      bucket_store, msf = oram_bucket_store(oram, msf);
      path_blocks, msf = stash_path_blocks(stash, msf);
      () = #unspill(path);
      path = #protect(path, msf);
      offset = BLOCKS_PER_BUCKET * DECRYPTED_BLOCK_SIZE_QWORDS * 8;
      for i = 0 to PATH_LENGTH
      {
        #declassify bucket_id = [path + 8 + 8 * i];
        bucket_id = #protect(bucket_id, msf);
        #update_after_call msf = bucket_store_write_bucket_blocks(bucket_store, bucket_id, path_blocks, msf);
        path = #protect(path, msf);
        bucket_store = #protect(bucket_store, msf);
        path_blocks = #protect(path_blocks, msf);
        path_blocks += (64u)offset;
      }
    } else {
      msf = #update_msf(!b, msf);
    }
    () = #unspill(abort);
    abort = #protect_32(abort, msf);
  } else {
    msf = #update_msf(!b, msf);
  }
  return abort;
}
